<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Home - Social Circles</title>
        <style>
            body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            text-align: center;
            background-color: #7079dfdc;
            }
            header {
            background: #6c47ff;
            color: #fff;
            padding: 16px 32px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(108, 71, 255, 0.13);
            border-radius: 0 0 24px 24px;
            }
            nav a {
            margin: 0 12px;
            text-decoration: none;
            font-weight: 600;
            color: #6c47ff;
            background: #fff;
            padding: 8px 18px;
            border-radius: 20px;
            box-shadow: 0 1px 5px rgba(108,71,255,0.07);
            transition: background 0.18s, color 0.18s;
            }
            .container {
            padding: 40px 20px;
            }
            .profile-section {
            display: flex;
            justify-content: center;
            gap: 50px;
            margin-top: 20px;
            }
            .profile {
            text-align: center;
            }
            .profile img {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: #ddd;
            }
            .buttons button {
            display: block;
            margin: 5px auto;
            padding: 5px 10px;
            border: none;
            background: #008CBA;
            color: white;
            cursor: pointer;
            }
            .buttons button:hover {
            background: #005f6b;
            }
            .group-circle {
            position: relative;
            width: 300px;
            height: 300px;
            margin: 30px auto;
            border-radius: 50%;
            border: 5px solid #620edf;
            background: #a7df9f;
            box-shadow: 0 0 10px rgba(206, 9, 9, 0.1);
            }
            .char {
            position: absolute;
            }
            .char img {
            width: 100px;
            height: 100px;
            /* width: 220px; */
            /* height: 160px; */
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid black;
            }
            .char1 {
            top: 40px;
            left: 50%;
            transform: translateX(-50%);
            }
            .char2 {
            bottom: 70px;
            left: 40px;
            }
            .char3 {
            bottom: 70px;
            right: 40px;
            }
            .group-buttons {
            margin-top: 20px;
            }
            .group-buttons button {
            margin: 10px;
            padding: 8px 16px;
            font-size: 14px;
            border: none;
            background: #681bc6;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            }
            .group-buttons button:hover {
            background: #005f6b;
            }
            .circle-row {
            display: flex;
            justify-content: center;
            gap: 60px;
            flex-wrap: wrap;
            margin-bottom: 32px;
            }
            .group-wrapper {
            display: flex;
            flex-direction: column;
            align-items: center;
            }
            /* New styles for feedback message area */
            #feedback-area {
            max-width: 600px;
            margin: 20px auto;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            transition: all 0.3s ease;
            display: none;
            }
            .positive-feedback {
            background-color: #dff0d8;
            border: 1px solid #d6e9c6;
            color: #3c763d;
            }
            .neutral-feedback {
            background-color: #fcf8e3;
            border: 1px solid #faebcc;
            color: #8a6d3b;
            }
            .negative-feedback {
            background-color: #f2dede;
            border: 1px solid #ebccd1;
            color: #a94442;
            }
            .score-change {
            font-weight: bold;
            margin-top: 10px;
            }
            .score-up {
            color: #3c763d;
            }
            .score-down {
            color: #a94442;
            }
        </style>
    </head>
    <body>
        <header>
            <div>Logo</div>
            <h1>Social Circles</h1>
            <div>
                Welcome, 
                <% if (user){ %>
                    <%=user.username%>
                <%} else{ %>
                Guest
                <% } %>
            !
            </div>
        </header>
        <a href="/logout">LOG OUT</a>
        <nav>
            <a href="#">Home</a>
            <a href="/leaderboard">Leaderboard</a>
            <a href="/accountinfo">Profile</a>
            <a href="/characters">Characters</a>
        </nav>
        <div class="container">
            <h2>Score: [insert score]</h2>
            
            <!-- New feedback area -->
            <div id="feedback-area"></div>
          
            <div class="circle-row">
                <div class="group-wrapper">
                  <div class="group-circle">
                    <!-- I'm using your linkedin profile pics, hope that's chill -->
                    <div class="char char1"><img src="/images/elliottNOBG.png" alt="Elliott"></div>
                    <div class="char char2"><img src="/images/rudraNOBG.png" alt="Rudra"></div>
                    <div class="char char3"><img src="/images/ahmetNOBG.png" alt="Ahmet"></div>
                  </div>
                </div>
                <div class="group-wrapper">
                  <div class="group-circle">
                    <div class="char char1"><img src="/images/luna.png" alt="Luna"></div>
                    <div class="char char2"><img src="/images/maya.png" alt="Maya"></div>
                    <div class="char char3"><img src="/images/jamal.png" alt="Jamal"></div>
                </div>
              </div>
          
            <div class="group-buttons">
              <button>Give compliment</button>
              <button>Offer help</button>
              <button>Invite to event</button>
            </div>
          </div>
    <script>
        // Character data with preferences - stronger negatives to ensure negative circle options
        const characters = [ // Adding an src attribute that stores the path to the character's image
        { id: 'elliott', name: 'Elliott', preferences: { invite: 8, help: 5, compliment: -10 }, src: "/images/elliottNOBG.png" },
        { id: 'rudra', name: 'Rudra', preferences: { invite: -10, help: 9, compliment: 4 }, src: "/images/rudraNOBG.png" },
        { id: 'ahmet', name: 'Ahmet', preferences: { invite: 3, help: -10, compliment: 8 }, src: "/images/ahmetNOBG.png" },
        { id: 'luna', name: 'Luna', preferences: { invite: 9, help: 3, compliment: -10 }, src: "/images/luna.png" },
        { id: 'maya', name: 'Maya', preferences: { invite: -10, help: 7, compliment: 6 }, src: "/images/maya.png" },
        { id: 'jamal', name: 'Jamal', preferences: { invite: 7, help: -10, compliment: 9 }, src: "/images/jamal.png" }
        ];

        function saveScoreToServer(score) {
            console.log('Saving scores:', {
                currentScore: score,
                sessionHighScore: gameState.sessionHighScore
            });
            
            const payload = { 
                score: score,
                sessionHighScore: gameState.sessionHighScore
            };
            
            fetch('/score/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            })
            .then(res => {
                if (!res.ok) {
                    return res.text().then(text => {
                        console.error('Error response:', text);
                        throw new Error(`Server responded with ${res.status}: ${text}`);
                    });
                }
                return res.json();
            })
            .then(data => {
                console.log('Scores saved successfully:', data);
            })
            .catch(err => {
                console.error('Save score error:', err.message);
                alert('Network error. Your scores might not be saved.');
            });
        }

        let circles = [
        { id: 'circle1', characters: ['elliott', 'rudra', 'ahmet'] },
        { id: 'circle2', characters: ['luna', 'maya', 'jamal'] }
        ];

        let gameState = {
            score: 0,
            highScore: 0,
            sessionHighScore: 0,
            selectedCircle: null,
            history: []
        };


        function loadScores() {
            return fetch('/score/current')
                .then(res => {
                    if (!res.ok) {
                        throw new Error('Failed to fetch scores');
                    }
                    return res.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log("Received score data:", data);
                        
                        // Store database high score
                        gameState.highScore = data.highScore || 0;
                        
                        // Apply current accumulated score
                        gameState.score = data.currentScore || 0;
                        
                        // Initialize session high score to match current score initially
                        gameState.sessionHighScore = gameState.score;
                        
                        console.log('Game initialized with scores:', {
                            currentScore: gameState.score,
                            sessionHighScore: gameState.sessionHighScore,
                            allTimeHighScore: gameState.highScore
                        });
                        
                        updateScoreDisplay();
                    }
                })
                .catch(err => {
                    console.error('Error loading scores:', err);
                });
        }



        let shuffleTimer = null;

        function getCharacter(characterId) {
        return characters.find(char => char.id === characterId);
        }

        function getCircle(circleId) {
        return circles.find(circle => circle.id === circleId);
        }

        // Calculate score for a specific action on a specific circle
        function calculateScore(circleId, action) {
        const circle = getCircle(circleId);
        if (!circle) return 0;
        
        let totalScore = 0;
        
        circle.characters.forEach(characterId => {
            const character = getCharacter(characterId);
            if (!character) return;
            
            // Add the preference score for this character and action
            totalScore += character.preferences[action];
        });
        
        // Return score information
        return {
            raw: totalScore
        };
        }

        // Calculate and check if each circle has at least one negative action
        function checkCirclesHaveNegativeAction() {
        circles.forEach(circle => {
            const actions = ['invite', 'help', 'compliment'];
            const scores = actions.map(action => {
            let score = 0;
            circle.characters.forEach(charId => {
                const char = getCharacter(charId);
                score += char.preferences[action];
            });
            return { action, score };
            });
            
            console.log(`Circle ${circle.id} action scores:`, scores);
        });
        }

        // Function to ensure each circle has at least one negative action
        function ensureNegativeActions() {
        // First shuffle to randomize
        shuffleCircles(false); 
        
        const actions = ['invite', 'help', 'compliment'];
        
        let allCirclesHaveNegativeAction = true;
        
        circles.forEach(circle => {
            let hasNegativeAction = false;
            
            actions.forEach(action => {
            let score = 0;
            circle.characters.forEach(charId => {
                const char = getCharacter(charId);
                score += char.preferences[action];
            });
            
            if (score < 0) {
                hasNegativeAction = true;
            }
            });
            
            if (!hasNegativeAction) {
            allCirclesHaveNegativeAction = false;
            }
        });
        
        if (!allCirclesHaveNegativeAction) {
            ensureNegativeActions();
        }
        }

        // Perform an action on a circle
        function performAction(circleId, action) {
            if (!['invite', 'help', 'compliment'].includes(action)) {
                throw new Error("Invalid action. Must be 'invite', 'help', or 'compliment'");
            }
            
            const scoreResult = calculateScore(circleId, action);
            
            // Store previous score before updating
            const previousScore = gameState.score;
            
            // Update current score (can go up or down)
            gameState.score += scoreResult.raw;
            
            console.log(`Score change: ${previousScore} -> ${gameState.score}`);
            
            // Update session high score if we've reached a new high
            if (gameState.score > gameState.sessionHighScore) {
                gameState.sessionHighScore = gameState.score;
                console.log(`New session high score: ${gameState.sessionHighScore}`);
            }
            
            // Save both scores to the server
            saveScoreToServer(gameState.score);

            gameState.history.push({
                circleId,
                action,
                score: scoreResult.raw,
                characters: getCircle(circleId).characters.map(id => getCharacter(id).name)
            });
            
            return {
                scoreResult,
                gameState: { ...gameState }
            };
        }
        
        function shuffleCircles(showNotification = true) {
        // Collect all character IDs
        const allCharacterIds = circles.flatMap(circle => circle.characters);
        
        // Shuffle the array
        for (let i = allCharacterIds.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [allCharacterIds[i], allCharacterIds[j]] = [allCharacterIds[j], allCharacterIds[i]];
        }
        
        // Redistribute characters to circles
        const charactersPerCircle = Math.floor(allCharacterIds.length / circles.length);
        
        circles = circles.map((circle, index) => {
            const start = index * charactersPerCircle;
            const end = (index === circles.length - 1) 
            ? allCharacterIds.length 
            : start + charactersPerCircle;
            
            return {
            ...circle,
            characters: allCharacterIds.slice(start, end)
            };
        });
        
        updateCircleDisplay();
        
        // Show feedback that circles were shuffled
        if (showNotification) {
            const feedbackArea = document.getElementById('feedback-area');
            feedbackArea.className = 'neutral-feedback';
            feedbackArea.innerHTML = '<p>Characters have been shuffled between circles!</p>';
            feedbackArea.style.display = 'block';
            
            setTimeout(() => {
            feedbackArea.style.display = 'none';
            }, 2000);
        }
        
        return [...circles];
        }

        // DOM interaction functions
        function updateScoreDisplay() {
            const scoreElement = document.querySelector('h2');
            scoreElement.textContent = `Score: ${gameState.score}`;
        }

        function updateCircleDisplay() {
        // Update the character images in each circle
        const circleElements = document.querySelectorAll('.group-circle');
        
        circles.forEach((circle, index) => {
            if (index >= circleElements.length) return;
            
            const charElements = circleElements[index].querySelectorAll('.char img');
            circle.characters.forEach((charId, charIndex) => {
            if (charIndex >= charElements.length) return;
            
            // Set the alt text to the character name
            charElements[charIndex].alt = getCharacter(charId).name;
            
            // In a real implementation, you would set the src to the character's image
            // For now, we'll keep the placeholders
            charElements[charIndex].src = getCharacter(charId).src;
            });
        });
        }

        function showFeedback(circleId, action, scoreResult) {
        const feedbackArea = document.getElementById('feedback-area');
        const circle = getCircle(circleId);
        const characters = circle.characters.map(id => getCharacter(id).name).join(', ');
        
        // Determine feedback type based on raw score
        let feedbackType, message, scoreChangeClass;
        
        if (scoreResult.raw > 0) {
            feedbackType = 'positive-feedback';
            message = `Great choice! ${characters} really appreciated your ${action}!`;
            scoreChangeClass = 'score-up';
        } else if (scoreResult.raw === 0) {
            feedbackType = 'neutral-feedback';
            message = `${characters} had mixed feelings about your ${action}.`;
            scoreChangeClass = '';
        } else {
            feedbackType = 'negative-feedback';
            message = `${characters} didn't like your ${action}. Not a good choice!`;
            scoreChangeClass = 'score-down';
        }
        
        // Set the feedback
        feedbackArea.className = feedbackType;
        feedbackArea.innerHTML = `
            <p>${message}</p>
            <div class="score-change ${scoreChangeClass}">${scoreResult.raw > 0 ? '+' : ''}${scoreResult.raw} points</div>
        `;
        
        feedbackArea.style.display = 'block';
        
        // Hide the feedback after some time
        setTimeout(() => {
            feedbackArea.style.display = 'none';
        }, 3000);
        }

        // Start the automatic shuffle timer (every 5 minutes)
        function startShuffleTimer() {
        // Clear any existing timer
        if (shuffleTimer) {
            clearInterval(shuffleTimer);
        }
        
        // Set the new timer - 5 minutes = 300000 milliseconds
        shuffleTimer = setInterval(() => {
            shuffleCircles();
            // After shuffling, ensure there's at least one negative action
            checkCirclesHaveNegativeAction();
        }, 300000); // 5 minutes
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Ensure all blocks and functions are properly closed
        });

            updateScoreDisplay();
        
        // Initial shuffle to randomize starting positions and ensure negative actions
        ensureNegativeActions();
        
        // Debug check
        checkCirclesHaveNegativeAction();
        document.addEventListener('DOMContentLoaded', () => {
            loadScores().then(() => {
                ensureNegativeActions();
                
                const circleElements = document.querySelectorAll('.group-circle');
                circleElements.forEach((circle, index) => {
                    circle.addEventListener('click', () => {
                        circleElements.forEach(c => c.style.borderColor = '#620edf');
                        circle.style.borderColor = '#ff5500';
                        
                        gameState.selectedCircle = `circle${index + 1}`;
                    });
                });
                const actionButtons = document.querySelectorAll('.group-buttons button');
            
                actionButtons[0].addEventListener('click', () => {
                    if (!gameState.selectedCircle) {
                    alert('Please select a circle first!');
                    return;
                    }
                    
                    const result = performAction(gameState.selectedCircle, 'compliment');
                    updateScoreDisplay();
                    showFeedback(gameState.selectedCircle, 'compliment', result.scoreResult);
                    
                    gameState.selectedCircle = null;
                    circleElements.forEach(c => c.style.borderColor = '#620edf');
                });
                
                actionButtons[1].addEventListener('click', () => {
                    if (!gameState.selectedCircle) {
                    alert('Please select a circle first!');
                    return;
                    }
                    
                    const result = performAction(gameState.selectedCircle, 'help');
                    updateScoreDisplay();
                    showFeedback(gameState.selectedCircle, 'help', result.scoreResult);
                    
                    gameState.selectedCircle = null;
                    circleElements.forEach(c => c.style.borderColor = '#620edf');
                });
                
                actionButtons[2].addEventListener('click', () => {
                    if (!gameState.selectedCircle) {
                    alert('Please select a circle first!');
                    return;
                    }
                    
                    const result = performAction(gameState.selectedCircle, 'invite');
                    updateScoreDisplay();
                    showFeedback(gameState.selectedCircle, 'invite', result.scoreResult);
                    
                    // Reset selection
                    gameState.selectedCircle = null;
                    circleElements.forEach(c => c.style.borderColor = '#620edf');
                });
            
                // Start the automatic shuffle timer
                startShuffleTimer();
            });
        });
    </script>
</body>
</html>